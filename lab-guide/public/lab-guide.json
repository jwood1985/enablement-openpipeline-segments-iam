[{"id":"1","name":"Environment Setup","content":"<h2 id=\"environmentsetup\">Environment Setup</h2>\n<p>This lab utilizes a GitHub Codespaces instance to run a Kubernetes cluster with an Internal Development Platform (IDP).</p>\n<p><img src=\"assets/01_00_idp_architecture.png\" alt=\"IDP Architecture\" /></p>\n<ul>\n<li>Dynatrace Tenant Setup</li>\n<li>GitHub Repository &amp; Codespaces Setup</li>\n<li>IDP Setup &amp; Validation</li>\n</ul>","activityList":[{"id":"1.1","name":"Dynatrace Tenant Setup","content":"<h2 id=\"dynatracetenantsetup\">Dynatrace Tenant Setup</h2>\n<p>You will need a Dynatrace SaaS tenant.</p>\n<h3 id=\"identifydynatracesaastenant\">Identify Dynatrace SaaS Tenant</h3>\n<p>Make a note of the Dynatrace environment name. This is the first part of the URL. <code>abc12345</code> would be the environment ID for <code>https://abc12345.apps.dynatrace.com</code></p>\n<ul>\n<li>For those running in other environments (such as <code>sprint</code>), make a note of your environment: <code>dev</code>, <code>sprint</code> or <code>live</code></li>\n</ul>\n<h3 id=\"skipdtoauthclientoptional\">Skip DT OAuth Client (optional)</h3>\n<blockquote>\n  <p>⚠️ Stop! If you are unable to create an OAuth Client, you can still complete this lab with partial functionality ⚠️</p>\n</blockquote>\n<p>Use the following fake values for your OAuth Client:</p>\n<p>Client id: </p>\n<pre><code class=\"hljs text language-text\">dt0f02.ABC123\n</code></pre>\n<p>Client secret:</p>\n<pre><code class=\"hljs text language-text\">dt0f02.ABC123.J5TVHCR6MJ4AAO4PX3MFGUKX4E42QJ4MUAM65DGC7ZKOHBK7DKY23WQPBKO\n</code></pre>\n<p>Account URN:</p>\n<pre><code class=\"hljs text language-text\">urn:dtaccount:e64e7279-f0b0-43e0-aedb-9eb3fa8c5cac\n</code></pre>\n<h3 id=\"createdtoauthclient\">Create DT OAuth Client</h3>\n<p>Open the Dynatrace Account Management page.  Click on <code>Identity &amp; access management</code>.  Click on <code>OAuth clients</code>.</p>\n<p><img src=\"assets/01_01_oauth_clients.png\" alt=\"OAuth Clients\" /></p>\n<p>Create a new OAuth Client by clicking on <code>Create client</code>.</p>\n<p>Provide your account email address and name the client <code>segments-client</code>.</p>\n<p>Configure the client to have the following permissions:</p>\n<blockquote>\n  <ul>\n  <li><code>document:documents:write</code></li>\n  <li><code>document:documents:read</code></li>\n  <li><code>automation:workflows:read</code></li>\n  <li><code>automation:workflows:write</code></li>\n  <li><code>storage:logs:read</code></li>\n  <li><code>storage:events:read</code></li>\n  <li><code>storage:events:write</code></li>\n  <li><code>storage:metrics:read</code></li>\n  <li><code>storage:bizevents:read</code></li>\n  <li><code>storage:bizevents:write</code></li>\n  <li><code>storage:system:read</code></li>\n  <li><code>storage:buckets:read</code></li>\n  <li><code>storage:spans:read</code></li>\n  <li><code>storage:entities:read</code></li>\n  <li><code>storage:fieldsets:read</code></li>\n  </ul>\n</blockquote>\n<p>Note: Your user account must have these permissions.  Follow <a href=\"https://www.dynatrace.com/support/help/platform-modules/business-analytics/ba-api-ingest\">the documentation</a> to set up an OAuth client + policy + bind to your service user account email.</p>\n<p><img src=\"assets/01_01_new_oauth_client_details.png\" alt=\"OAuth Client Details\" /></p>\n<p>After the client is created, copy and save the client details.  Once you click <code>Finish</code>, you can never obtain the <code>client secret</code> ever again!!</p>\n<p>You should now have 5 pieces of information:</p>\n<ol>\n<li>A DT environment (<code>dev</code>, <code>sprint</code> or <code>live</code>)</li>\n<li>A DT environment ID</li>\n<li>An OAuth client ID</li>\n<li>An OAuth client secret</li>\n<li>An account URN</li>\n</ol>\n<h3 id=\"createdtapitoken\">Create DT API Token</h3>\n<p>Create a Dynatrace access token with the following permissions. This token will be used by the setup script to automatically create all other required DT tokens.</p>\n<ol>\n<li><code>apiTokens.read</code></li>\n<li><code>apiTokens.write</code></li>\n</ol>\n<p><img src=\"assets/01_01_dynatrace_api_token.png\" alt=\"Dynatrace API Token\" /></p>\n<p>You should now have 6 pieces of information:</p>\n<ol>\n<li>A DT environment (<code>dev</code>, <code>sprint</code> or <code>live</code>)</li>\n<li>A DT environment ID</li>\n<li>An oAuth client ID</li>\n<li>An oAuth client secret</li>\n<li>An account URN</li>\n<li>An API token</li>\n</ol>","activityList":[]},{"id":"1.2","name":"GitHub Repository Setup","content":"<h2 id=\"githubrepositorysetup\">GitHub Repository Setup</h2>\n<p>You will need a GitHub account.</p>\n<p>The source repository for this lab is: </p>\n<p><a href=\"https://github.com/dynatrace-wwse/enablement-openpipeline-segments-iam\">enablement-openpipeline-segments-iam</a></p>\n<p>The reference repository (<em>not</em> used for this lab) is:</p>\n<p><a href=\"https://github.com/dynatrace-perfclinics/platform-engineering-demo\">platform-engineering-demo</a></p>\n<h3 id=\"forkrepository\">Fork Repository</h3>\n<p>Create your own fork of the source repository.</p>\n<blockquote>\n  <p>⚠️ Note ⚠️ running this lab will modify the repository, you will need to delete your fork and start from the beginning (new fork) every time you run this lab!</p>\n</blockquote>\n<p><img src=\"assets/01_02_github_create_fork.png\" alt=\"Create Fork\" /></p>\n<h3 id=\"enableactionsinyourfork\">⚠️ Enable Actions in your Fork ⚠️</h3>\n<blockquote>\n  <p>⚠️ This step is important! ⚠️</p>\n</blockquote>\n<p>This lab uses one GitHub action to automatically merge Pull Requests when apps are onboarded.</p>\n<p>In your fork, go to <code>Actions</code> and click the green button: <code>I understand my workflows, go ahead and enable them</code>.</p>\n<p><img src=\"assets/01_02_github_enable_actions.png\" alt=\"GitHub Actions\" /></p>\n<h3 id=\"deleteargocdhookjobsoptional\">Delete ArgoCD Hook Jobs (optional)</h3>\n<p>If you do not have an OAuth Client, you will not be able to execute ArgoCD Hook Jobs that generate BizEvent data.</p>\n<p><img src=\"assets/01_02_argohookjobs.png\" alt=\"ArgoCD Hook Jobs\" /></p>\n<p>In your fork, go to <code>Code</code>.  Navigate to <code>/apptemplates/simplenodeservice-content/argohookjobs.yml</code>.</p>\n<p>Edit the file, delete all contents, and replace with <code>---</code>.  Save the file.</p>\n<h3 id=\"configurecodespacessettings\">Configure Codespaces Settings</h3>\n<p>By default, codespaces instances will suspend after 30 minutes of inactivity.  This may cause problems with your lab.</p>\n<p>Open GitHub Account settings at <a href=\"https://github.com/settings/profile\">https://github.com/settings/profile</a></p>\n<p><img src=\"assets/01_02_codespaces_settings.png\" alt=\"Codespaces Settings\" /></p>\n<p>Increase the <code>Default idle timeout</code> setting.</p>\n<h3 id=\"createcodespacesinstance\">Create Codespaces Instance</h3>\n<p>In your fork:</p>\n<ol>\n<li>Switch to the <code>main</code> branch</li>\n<li>Click the green <code>Code</code> button</li>\n<li>Change to <code>Codespaces</code></li>\n<li>Click the <code>...</code> and choose <code>New with options...</code></li>\n</ol>\n<p><img src=\"assets/01_02_codespaces_new_with_options.png\" alt=\"New Codespaces Instance\" /></p>\n<p><strong>Warning!</strong> Do not click the green \"Create codespace on codespace\" button!!</p>\n<p>Fill in the form and launch the codespace.</p>\n<p><img src=\"assets/01_02_codespaces_machine_type.png\" alt=\"Codespaces Configuration\" /></p>\n<p>Be sure to select 4-core as your machine type.</p>\n<p>Choose a region close to your Dynatrace tenant.  If you run into issues with spinning up your codespaces instance, try selecting a different region.</p>\n<p><img src=\"assets/01_02_codespaces_new_secrets.png\" alt=\"Codespaces Secrets\" /></p>\n<p>If you have <strong>already</strong> defined the environment variables in your repository, you'll see a screen asking you to associate those secrets with this repository. Please check the boxes as shown below.</p>\n<p><img src=\"assets/01_02_codespaces_existing_secrets.png\" alt=\"Codespaces Existing Secrets\" /></p>\n<p>The codespaces instance will launch and the setup scripts will execute.</p>\n<p>Wait until the <code>Running postStartCommand...</code> disappears. It should take ~10 minutes.</p>\n<h3 id=\"activatekubernetesexperienceindynatrace\">Activate Kubernetes Experience in Dynatrace</h3>\n<p>When the codespaces instance is finished launching, go to the Terminal prompt and run the following command:</p>\n<pre><code class=\"hljs text language-text\">kubectl get pods -n dynatrace\n</code></pre>\n<p><img src=\"assets/01_02_dynatrace_activegate_pod.png\" alt=\"Dynatrace ActiveGate Pod\" /></p>\n<p>Run this command every couple minutes until you see the <code>platform-engineering-demo-activegate-0</code> pod running and ready.</p>\n<p>Navigate to the Dynatrace tenant and launch the <code>Kubernetes</code> App.  You should eventually see a cluster pending activation.  Activate the Kubernetes Experience for your <code>platform-engineering-demo</code> cluster.</p>\n<p><img src=\"assets/01_02_kubernetes_experience.png\" alt=\"Dynatrace Kubernetes Experience Activation\" /></p>","activityList":[]},{"id":"1.3","name":"Internal Development Platform Setup","content":"<h2 id=\"internaldevelopmentplatformsetup\">Internal Development Platform Setup</h2>\n<p>When the codespaces instance is fully initialized and running, you'll be able to access the IDP components.</p>\n<h3 id=\"logintoargocd\">Login to ArgoCD</h3>\n<p>Get ArgoCD password:</p>\n<pre><code class=\"hljs\">ARGOCDPWD=<span class=\"hljs-constructor\">$(<span class=\"hljs-params\">kubectl</span> -<span class=\"hljs-params\">n</span> <span class=\"hljs-params\">argocd</span> <span class=\"hljs-params\">get</span> <span class=\"hljs-params\">secret</span> <span class=\"hljs-params\">argocd</span>-<span class=\"hljs-params\">initial</span>-<span class=\"hljs-params\">admin</span>-<span class=\"hljs-params\">secret</span> -<span class=\"hljs-params\">o</span> <span class=\"hljs-params\">jsonpath</span>=<span class=\"hljs-string\">&quot;{.data.password}&quot;</span> | <span class=\"hljs-params\">base64</span> -<span class=\"hljs-params\">d</span>)</span>\necho $ARGOCDPWD\n</code></pre>\n<p>The username is: <code>admin</code></p>\n<p>Change to <code>Ports</code> tab and open ArgoCD (port <code>30100</code>) &amp; log in as <code>admin</code>.</p>\n<p><img src=\"assets/01_03_argocd.png\" alt=\"ArgoCD Login\" /></p>\n<p><img src=\"assets/01_03_argocd_overview.png\" alt=\"ArgoCD Overview\" /></p>\n<h3 id=\"logintobackstage\">Login to Backstage</h3>\n<p>Backstage is available (port <code>30105</code>) without any login credentials.</p>\n<p>Change to <code>Ports</code> tab and open Backstage (port <code>30105</code>).</p>\n<p><img src=\"assets/01_03_backstage.png\" alt=\"Backstage Login\" /></p>","activityList":[]}]},{"id":"2","name":"Self-Service Onboarding","content":"<h2 id=\"selfserviceonboarding\">Self-Service Onboarding</h2>\n<p>Using Backstage templates, deploy (4) new applications to the internal development platform (IDP).  Backstage will create new application manifests within the Git repository.  ArgoCD will automatically detect and deploy the new application manifests to the Kubernetes cluster.  Dynatrace will automatically observe the new applications.</p>\n<ul>\n<li>Onboard new applications using Backstage</li>\n<li>Explore the new applications deployed by ArgoCD</li>\n<li>Analyze the applications with Dynatrace<ul>\n<li>Analyze without Segments</li></ul></li>\n</ul>","activityList":[{"id":"2.1","name":"Onboard New Apps","content":"<h2 id=\"onboardnewapps\">Onboard New Apps</h2>\n<p>Use Backstage to create (4) new applications on the internal development platform (IDP).</p>\n<h3 id=\"createnewcomponent\">Create New Component</h3>\n<p>Navigate to Backstage (using port 30105 of your codespaces instance).  </p>\n<p><img src=\"assets/02_01_backstage_create.png\" alt=\"Backstage Create\" /></p>\n<p>Click on <code>Create</code> near the top right corner of the page.</p>\n<p>From the Templates, locate <code>Create a New Application</code> and click on <code>Choose</code>.</p>\n<p><img src=\"assets/02_01_create_new_application.png\" alt=\"Create a New Application\" /></p>\n<p>Follow the 4 step template to create a new application using these values:</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Project Name</td>\n<td>SimpleNodeService</td>\n</tr>\n<tr>\n<td>Team Identifier</td>\n<td>team01</td>\n</tr>\n<tr>\n<td>Team Full Name</td>\n<td>Team 01</td>\n</tr>\n<tr>\n<td>Team Email</td>\n<td>team01@dynatrace.training</td>\n</tr>\n<tr>\n<td>App Version</td>\n<td>1.0.2</td>\n</tr>\n<tr>\n<td>Release Stage</td>\n<td>qa</td>\n</tr>\n<tr>\n<td>DORA Enabled</td>\n<td>enabled</td>\n</tr>\n<tr>\n<td>Include Security Scans</td>\n<td>enabled</td>\n</tr>\n<tr>\n<td>Include DT Config</td>\n<td>enabled</td>\n</tr>\n</tbody>\n</table>\n<p><img src=\"assets/02_01_review_and_create.png\" alt=\"Review and Create\" /></p>\n<p>Review the new application details and click <code>Create</code>.</p>\n<p>Wait for the merge request to be merged automatically (1-2 minutes) and for ArgoCD to finish deploying the new app (3-5 minutes).</p>\n<h3 id=\"createadditionalcomponents\">Create Additional Components</h3>\n<p>Repeat the previous steps, 3 more times, to onboard a total of (4) applications.  Use the following values:</p>\n<table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Value</th>\n<th>Value 2</th>\n<th>Value 3</th>\n<th>Value 4</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Project Name</td>\n<td>SimpleNodeService</td>\n<td>SimpleNodeService</td>\n<td>SimpleNodeService</td>\n<td>SimpleNodeService</td>\n</tr>\n<tr>\n<td>Team Identifier</td>\n<td>team01</td>\n<td>team01</td>\n<td>team02</td>\n<td>team02</td>\n</tr>\n<tr>\n<td>Team Full Name</td>\n<td>Team 01</td>\n<td>Team 01</td>\n<td>Team 02</td>\n<td>Team 02</td>\n</tr>\n<tr>\n<td>Team Email</td>\n<td>team01@dynatrace.training</td>\n<td>team01@dynatrace.training</td>\n<td>team02@dynatrace.training</td>\n<td>team02@dynatrace.training</td>\n</tr>\n<tr>\n<td>App Version</td>\n<td>1.0.2</td>\n<td>1.0.2</td>\n<td>1.0.2</td>\n<td>1.0.2</td>\n</tr>\n<tr>\n<td>Release Stage</td>\n<td>qa</td>\n<td>staging</td>\n<td>qa</td>\n<td>staging</td>\n</tr>\n<tr>\n<td>DORA Enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n</tr>\n<tr>\n<td>Include Security Scans</td>\n<td>enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n</tr>\n<tr>\n<td>Include DT Config</td>\n<td>enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n<td>enabled</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"reviewnewcomponents\">Review New Components</h3>\n<p><img src=\"assets/02_01_all_components.png\" alt=\"All Components\" /></p>\n<p>In your Backstage catalog, you should now have (4) components for the (4) new applications.</p>\n<h3 id=\"validateappdeployment\">Validate App Deployment</h3>\n<p>Navigate to the ArgoCD instance (using port 30100 of your codespaces instance).</p>\n<p><img src=\"assets/02_01_argocd_apps_deployed.png\" alt=\"ArgoCD Apps\" /></p>\n<p>ArgoCD will automatically deploy the new applications based on the manifests created in the Git repository by Backstage.</p>\n<p>ArgoCD will reconcile the configurations every 3 minutes.  When a change is detected, it will automatically sync and deploy the changes to the Kubernetes cluster.  This process may take 5-10 minutes total for all (4) applications to be deployed successfully.</p>\n<p>Wait for the apps to be deployed and for all (4) apps to show as <code>Healthy</code> and <code>Synced</code>.  In case of any issues with the sync, sync the app manually to try again.</p>","activityList":[]},{"id":"2.2","name":"Explore New Apps","content":"<h2 id=\"explorenewapps\">Explore New Apps</h2>\n<p>Browse the new applications to test them and generate transactions.</p>\n<h3 id=\"browseapplications\">Browse Applications</h3>\n<p>Navigate to Backstage (using port 30105 of your codespaces instance).  Locate the (4) Components in the Catalog.</p>\n<p><img src=\"assets/02_02_browse_application.png\" alt=\"Browse Applications\" /></p>\n<p>Click into each component.  Halfway down the page, locate the <code>Links</code> section.  Click on <code>Browse Application</code> to open the application in your browser.  Repeat this for all (4) components.  You should have (4) tabs open with the different SimpleNodeService applications.</p>\n<p><img src=\"assets/02_02_invoke_applications.png\" alt=\"Invoke Application\" /></p>\n<p>The application should load successfully.  Note the URL in the address bar of your browser to determine which instance you are viewing.</p>\n<p>Click on the <code>Echo</code> button several times to generate Echo transactions.</p>\n<p>Click on the <code>Invoke</code> button several times to generate Invoke transactions.</p>","activityList":[]},{"id":"2.3","name":"Analyze with Dynatrace","content":"<h2 id=\"analyzewithdynatrace\">Analyze with Dynatrace</h2>\n<p>Explore the observability data captured by Dynatrace for the new applications</p>\n<h3 id=\"explorekubernetesapp\">Explore Kubernetes App</h3>\n<p>Let's quickly validate that Dynatrace is properly monitoring our Platform Kubernetes Cluster. For this we open the Kubernetes App.</p>\n<p>Lets validate that we have no issues across all layers of Kubernetes (cluster, namespaces, workloads …).</p>\n<p>We can also explore the ready-made dashboards to get more insights into e.g: Cluster health</p>\n<p><img src=\"assets/02_03_kubernetes_app.png\" alt=\"Kubernets App\" /></p>\n<p>Use the Kubernetes App to locate the new applications.  Each application is deployed into its own namespace.  Check the status of the different components deployed into the namespace.</p>\n<h3 id=\"exploreidpsimplenodeservicesdashboard\">Explore IDP SimpleNodeServices Dashboard</h3>\n<p>If you haven't already, import the <a href=\"https://github.com/dynatrace-wwse/enablement-openpipeline-segments-iam/blob/main/lab-guide/assets/dynatrace/IDP_%20SimpleNodeServices_Dashboard.json\">IDP SimpleNodeServices</a> Dashboard into the Dynatrace environment.</p>\n<p><img src=\"assets/02_03_idp_simplenodeservices_dashboard.png\" alt=\"IDP SimpleNodeServices Dashboard\" /></p>\n<p>Use the dashboard to observe the health of the SimpleNodeService applications/services deployed on the IDP.</p>\n<p>Change the variable selectors for <code>Namespace</code> to find the relevant details for the (4) application namespaces.</p>","activityList":[]}]},{"id":"3","name":"Basic Segments","content":"<h2 id=\"basicsegments\">Basic Segments</h2>\n<p>Configure and use Segments to apply filters to data retrieved from Grail.</p>\n<ul>\n<li>Configure basic Segments<ul>\n<li>Kubernetes Cluster (IDP)</li>\n<li>Kubernetes Namespace (IDP)</li></ul></li>\n<li>Analyze with Segments</li>\n</ul>","activityList":[{"id":"3.1","name":"Create Kubernetes Segments","content":"<h2 id=\"createkubernetessegments\">Create Kubernetes Segments</h2>\n<p>Create Segments to filter analysis on Kubernetes properties, Cluster and Namespace</p>\n<h3 id=\"segmentkubernetesclusteridp\">Segment: Kubernetes Cluster (IDP)</h3>\n<p>In the Dynatrace environment, locate and launch the <code>Segments</code> App.</p>\n<p><img src=\"assets/03_01_segments_app.png\" alt=\"Segments App\" /></p>\n<p>Click on <code>+ Segment</code> to create a new Segment.</p>\n<p><img src=\"assets/03_01_idp_k8s_cluster_segment.png\" alt=\"idp-k8s-cluster segment\" /></p>\n<p>Name the Segment <code>idp-k8s-cluster</code>.</p>\n<p>Begin by defining a Variable for the Segment.</p>\n<p><img src=\"assets/03_01_idp_k8s_cluster_variable.png\" alt=\"idp-k8s-cluster variable\" /></p>\n<p>In your Variables configuration, enter the following DQL Query:</p>\n<pre><code class=\"hljs sql language-sql\">fetch dt.entity.kubernetes_cluster\n| fields name = entity.name, id, namespace = cluster_of[`dt.entity.cloud_application_namespace`]\n| expand namespace\n| lookup [fetch dt.entity.cloud_application_namespace\n          | filter in(entity.name,{&quot;argocd&quot;,&quot;backstage&quot;})\n          | fields id, entity.name, cloudApplicationLabels\n          | fieldsFlatten cloudApplicationLabels\n          | fields id, name = entity.name, owner = `cloudApplicationLabels.dt.owner`\n          | filter owner == &quot;platform_team&quot;], sourceField: namespace, lookupField: id, prefix: &quot;namespace.&quot;\n| filterOut isNull(namespace.id)\n| summarize collectDistinct(id), by: {name, id, namespace.owner}\n| fields name, id, owner = namespace.owner\n</code></pre>\n<p>Click <code>Preview</code> to run the query.  You should see your <code>platform-engineering-demo</code> cluster details.</p>\n<p>Click <code>Done</code>.</p>\n<p><img src=\"assets/03_01_idp_k8s_cluster_segment.png\" alt=\"idp-k8s-cluster segment\" /></p>\n<p>Under Segment data, create a new rule for <code>All data types</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">dt.entity.kubernetes_cluster = &quot;$id&quot; OR k8s.cluster.name = &quot;$name&quot;\n</code></pre>\n<p>Adding this segment data filter to our Segment will apply to any Grail data queries when this Segment is applied.</p>\n<p>Under Segment data, create a new rule for <code>Entities</code> &gt; <code>Kubernetes cluster</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">entity.name = &quot;$name&quot;\n</code></pre>\n<p>Add related Kubernetes entities to the Segment data filter.  Click on <code>+ Related entity</code> and choose <code>Kubernetes namespace</code>.  This will include any Kubernetes namespace entity that is related to the Kubernetes cluster.  Repeat this process for ALL related entity types.</p>\n<p>As you make your configurations, clicking on <code>Preview</code> will allow you to see which entities or data types matched your filter.</p>\n<p>When your Segment configuration is complete, click on <code>Save</code>.</p>\n<p>Note: You can change the visibility of your Segment, however if you are the only one accessing the environment, this is irrelevant.</p>\n<h3 id=\"segmentkubernetesnamespaceidp\">Segment: Kubernetes Namespace (IDP)</h3>\n<p>Click on <code>+ Segment</code> to create a new Segment.</p>\n<p><img src=\"assets/03_01_idp_k8s_namespace_segment.png\" alt=\"idp-k8s-namespace segment\" /></p>\n<p>Name the Segment <code>idp-k8s-namespace</code>.</p>\n<p>Begin by defining a Variable for the Segment.</p>\n<p><img src=\"assets/03_01_idp_k8s_namespace_variable.png\" alt=\"idp-k8s-namespace variable\" /></p>\n<p>In your Variables configuration, enter the following DQL Query:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> dt.entity.cloud_application_namespace\n<span class=\"hljs-operator\">|</span> fields id, entity.name, owner <span class=\"hljs-operator\">=</span> cloudApplicationLabels[`dt.owner`], cluster <span class=\"hljs-operator\">=</span> clustered_by[`dt.entity.kubernetes_cluster`]\n<span class=\"hljs-operator\">|</span> lookup [<span class=\"hljs-keyword\">fetch</span> dt.entity.kubernetes_cluster\n          <span class=\"hljs-operator\">|</span> fields id, entity.name], sourceField:cluster, lookupField: id, prefix: &quot;cluster.&quot;\n<span class=\"hljs-operator\">|</span> filterOut isNull(cluster.id) <span class=\"hljs-keyword\">OR</span> isNull(owner) <span class=\"hljs-keyword\">OR</span> owner <span class=\"hljs-operator\">=</span><span class=\"hljs-operator\">=</span> &quot;platform_team&quot;\n<span class=\"hljs-operator\">|</span> fields name <span class=\"hljs-operator\">=</span> entity.name, id, cluster.id, cluster.name <span class=\"hljs-operator\">=</span> cluster.entity.name, owner\n</code></pre>\n<p>Click <code>Preview</code> to run the query.  You should see your <code>simplenodeservice-*-*</code> namespace details.</p>\n<p>Click <code>Done</code>.</p>\n<p><img src=\"assets/03_01_idp_k8s_namespace_segment.png\" alt=\"idp-k8s-namespace segment\" /></p>\n<p>Under Segment data, create a new rule for <code>All data types</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">k8s.namespace.name = &quot;$name&quot; OR dt.entity.cloud_application_namespace = &quot;$id&quot;\n</code></pre>\n<p>Adding this segment data filter to our Segment will apply to any Grail data queries when this Segment is applied.</p>\n<p>Under Segment data, create a new rule for <code>Entities</code> &gt; <code>Kubernetes namespace</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">entity.name = &quot;$name&quot;\n</code></pre>\n<p>Add related Kubernetes entities to the Segment data filter.  Click on <code>+ Related entity</code> and choose <code>Kubernetes cluster</code>.  This will include any Kubernetes cluster entity that is related to the Kubernetes cluster.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">id = &quot;$cluster.id&quot; OR entity.name = &quot;$cluster.name&quot;\n</code></pre>\n<p>Next, click on <code>+ Related entity</code> and choose <code>Kubernetes service</code>.  Do not apply any additional filter.</p>\n<p>Repeat this process for ALL related entity types.</p>\n<p>As you make your configurations, clicking on <code>Preview</code> will allow you to see which entities or data types matched your filter.</p>\n<p>When your Segment configuration is complete, click on <code>Save</code>.</p>\n<p>Note: You can change the visibility of your Segment, however if you are the only one accessing the environment, this is irrelevant.</p>\n<h3 id=\"validatenewsegments\">Validate New Segments</h3>\n<p>Validate that your new Segments have been created.</p>\n<p><img src=\"assets/03_01_validate_segments.png\" alt=\"validate segments\" /></p>","activityList":[]},{"id":"3.2","name":"Analyze with Segments","content":"<h2 id=\"analyzewithsegments\">Analyze with Segments</h2>\n<p>Analyze the applications in Dynatrace, this time using the newly created Segments.</p>\n<h3 id=\"exploreidpsimplenodeservicesdashboard\">Explore IDP SimpleNodeServices Dashboard</h3>\n<p>If you haven't already, import the <a href=\"https://github.com/dynatrace-wwse/enablement-openpipeline-segments-iam/blob/main/lab-guide/assets/dynatrace/IDP_%20SimpleNodeServices_Dashboard.json\">IDP SimpleNodeServices</a> Dashboard into the Dynatrace environment.</p>\n<p><img src=\"assets/02_03_idp_simplenodeservices_dashboard.png\" alt=\"IDP SimpleNodeServices Dashboard\" /></p>\n<p>Use the variable selector for <code>Namespace</code>.  Notice the long list of namespaces available to choose from.</p>\n<p><img src=\"assets/03_02_dashboard_namespace_selector.png\" alt=\"Namespace Selector\" /></p>\n<p>The variable is configured (via DQL query) to pick from every Kubernetes namespace detected in the Dynatrace environment, across all clusters.</p>\n<p>Apply Segment filters to the dashboard.  Click on the <code>Segments</code> icon to open the Segments filter prompt (next to the timeframe selector).</p>\n<p><img src=\"assets/03_02_apply_segments_dashboard.png\" alt=\"Apply Segments\" /></p>\n<p>Start by applying the <code>idp-k8s-cluster</code> Segment filter and choose the <code>platform-engineering-demo</code> Kubernetes cluster.</p>\n<p>Then apply the <code>idp-k8s-namespace</code> Segment filter and choose all (4) Kubernetes namespaces.</p>\n<p>Click <code>Apply</code> to apply the Segment filter(s) to the dashboard.</p>\n<p>Use the variable selector for <code>Namespace</code>.  Notice the reduced list of namespaces available to choose from.</p>","activityList":[]}]},{"id":"4","name":"OpenPipeline","content":"<h2 id=\"openpipeline\">OpenPipeline</h2>\n<p>Use OpenPipeline to transform data on ingest before it is stored in Grail.</p>\n<p><em>Goal:</em> We want to use a Segment to filter data based on team ownership.  Ownership metadata does not exist on data stored in Grail.  Use OpenPipeline to identify ownership metadata and add it as additional attribute(s).</p>\n<ul>\n<li>Logs Pipeline</li>\n<li>Metrics Pipeline</li>\n</ul>","activityList":[{"id":"4.1","name":"OpenPipeline: Logs Pipeline","content":"<h2 id=\"openpipelinelogspipeline\">OpenPipeline: Logs Pipeline</h2>\n<p>Use OpenPipeline to transform log data on ingest prior to being stored in Grail.</p>\n<h3 id=\"queryexistinglogdata\">Query Existing Log Data</h3>\n<p>Use the <code>Logs</code> App to explore the existing log data for the IDP and the deployed applications.  Note that Dynatrace is deployed with <code>Application Monitoring</code> Dynakube and Kubernetes Observability.  Logs are collected using an OpenTelemetry Collector that ships the logs to Dynatrace.</p>\n<p><img src=\"assets/04_01_logs_app_viewer.png\" alt=\"Logs App\" /></p>\n<p>From the Logs App, try to locate logs that are relevant to a specific application team (i.e. team01 or team02).</p>\n<p>Import the <a href=\"https://github.com/dynatrace-wwse/enablement-openpipeline-segments-iam/blob/main/lab-guide/assets/dynatrace/IDP_%20OpenPipeline_Notebook.json\">IDP OpenPipeline Notebook</a> Notebook into the Dynatrace environment.</p>\n<p><img src=\"assets/04_01_notebook_query_existing_logs.png\" alt=\"Existing Logs\" /></p>\n<p>Execute the first DQL query, which retrieves the logs from the <code>SimpleNodeService</code> pods.  Take notice of the <code>dt.security_context</code>, <code>idp_project</code>, <code>idp_team</code>, and <code>idp_stage</code> attributes.  We want to use OpenPipeline to modify/add these fields to the log records.</p>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> matchesPhrase(k8s.pod.name,&quot;simplenodeservice-&quot;)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, dt.security_context, k8s.cluster.name, k8s.namespace.name, k8s.container.name, idp_team, idp_project, idp_stage\n</code></pre>\n<h3 id=\"createpipeline\">Create Pipeline</h3>\n<p>From the Dynatrace environment, locate and launch the <code>OpenPipeline</code> App.  Select the <code>Logs</code> tab on the left.</p>\n<p><img src=\"assets/04_01_openpipeline_logs.png\" alt=\"OpenPipeline App\" /></p>\n<p>Click on the <code>Pipelines</code> tab.</p>\n<p><img src=\"assets/04_01_openpipeline_new_pipeline.png\" alt=\"New Pipeline\" /></p>\n<p>Click on <code>+ Pipeline</code> to create a new pipeline.</p>\n<p><img src=\"assets/04_01_pipeline_identify_nodejs.png\" alt=\"Name Pipeline\" /></p>\n<p>Rename the pipeline to <code>idp-project-logs</code>.  Select the <code>Processing</code> tab.  Add a new processor and choose <code>Add fields</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Identify NodeJS\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">matchesPhrase(k8s.pod.name,&quot;simplenodeservice-&quot;)\n</code></pre>\n<p>Field Name:</p>\n<pre><code class=\"hljs text language-text\">process.technology\n</code></pre>\n<p>Field Value:</p>\n<pre><code class=\"hljs text language-text\">nodejs\n</code></pre>\n<p><img src=\"assets/04_01_pipeline_nodejs_tech_bundle.png\" alt=\"NodeJS Tech Bundle\" /></p>\n<p>Add a new processor and choose <code>Technology Bundle</code>.  Choose the <code>NodeJS</code> bundle in the Applications category.</p>\n<p>This technology bundle will attempt to parse logs for patterns commonly used by NodeJS frameworks.</p>\n<p><img src=\"assets/04_01_pipeline_parse_namespace.png\" alt=\"Parse Namespace\" /></p>\n<p>Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Parse Namespace\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(k8s.namespace.name)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">parse k8s.namespace.name, &quot;LD:idp_project &#x27;-&#x27; LD:idp_team &#x27;-&#x27; LD:idp_stage&quot;\n</code></pre>\n<p><img src=\"assets/04_01_pipeline_parse_cluster.png\" alt=\"Parse Cluster\" /></p>\n<p>Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Parse Cluster\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(k8s.cluster.name)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">fieldsAdd idp_cluster = k8s.cluster.name\n</code></pre>\n<p><img src=\"assets/04_01_pipeline_add_security_context.png\" alt=\"Security Context\" /></p>\n<p>Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Security Context\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(idp_cluster) and isNotNull(idp_team)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">fieldsAdd idp_security_context = concat(&quot;idp_&quot;,idp_team,&quot;_&quot;,idp_cluster)\n</code></pre>\n<p><img src=\"assets/04_01_pipeline_set_security_context.png\" alt=\"Set Security Context\" /></p>\n<p>Select the <code>Permission</code> tab.  Add a new processor and choose <code>Set security context</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">IDP Security Context\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(idp_security_context)\n</code></pre>\n<p>Field Name</p>\n<pre><code class=\"hljs text language-text\">idp_security_context\n</code></pre>\n<p>Click on <code>Save</code> to save the pipeline configuration.</p>\n<h3 id=\"createdynamicroute\">Create Dynamic Route</h3>\n<p>From the OpenPipeline Logs configuration page, click on <code>Dynamic Routing</code>.</p>\n<p><img src=\"assets/04_01_pipeline_routes_new_route.png\" alt=\"Dynamic Routes\" /></p>\n<p>Click on <code>+ Dynamic Route</code> to create a new route for the pipeline.</p>\n<p><img src=\"assets/04_01_pipeline_set_dynamic_route.png\" alt=\"New Route\" /></p>\n<p>Set the dynamic route properties:</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">idp-project-logs\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">k8s.cluster.name == &quot;platform-engineering-demo&quot; and isNotNull(k8s.namespace.name)\n</code></pre>\n<p>Pipeline:</p>\n<pre><code class=\"hljs text language-text\">idp-project-logs\n</code></pre>\n<p>Click <code>Save</code> to save the dynamic route configuration.  This change is not retroactive.  New logs matching the condition will be routed through the new pipeline.</p>\n<h3 id=\"querynewlogdata\">Query New Log Data</h3>\n<p>The change will likely take a few minutes to complete.  After some time, return to the <code>IDP OpenPipeline</code> Notebook.</p>\n<p><img src=\"assets/04_01_notebook_query_new_logs.png\" alt=\"Query New Logs\" /></p>\n<p>Re-run the first query.  Continue to run the query until the <code>idp_*</code> fields no longer return <code>null</code>.  The new fields can be used to filter log data at query time.  Additionally, the new value of <code>dt.security_context</code> can be used to configure record-level permissions with IAM Policies.</p>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\"><span class=\"hljs-keyword\">fetch</span> logs\n<span class=\"hljs-operator\">|</span> <span class=\"hljs-keyword\">filter</span> matchesPhrase(k8s.pod.name,&quot;simplenodeservice-&quot;)\n<span class=\"hljs-operator\">|</span> sort <span class=\"hljs-type\">timestamp</span> <span class=\"hljs-keyword\">desc</span>\n<span class=\"hljs-operator\">|</span> fields <span class=\"hljs-type\">timestamp</span>, dt.security_context, k8s.cluster.name, k8s.namespace.name, k8s.container.name, idp_team, idp_project, idp_stage\n</code></pre>\n<p><img src=\"assets/04_01_notebook_summarize_new_logs.png\" alt=\"Summarize New Logs\" /></p>\n<p>Execute the second query and summarize the new log data.  It is now easy to identify logs based on the <code>idp_team</code>, <code>idp_project</code>, and <code>idp_stage</code> details.</p>\n<p>DQL:</p>\n<pre><code class=\"hljs sql language-sql\">fetch logs\n| filter matchesPhrase(k8s.pod.name,&quot;simplenodeservice-&quot;)\n| summarize logs = count(), by: {dt.security_context, k8s.cluster.name, k8s.namespace.name, idp_team, idp_project, idp_stage}\n</code></pre>","activityList":[]},{"id":"4.2","name":"OpenPipeline: Metrics Pipeline","content":"<h2 id=\"openpipelinemetricspipeline\">OpenPipeline: Metrics Pipeline</h2>\n<p>Use OpenPipeline to transform metric data on ingest prior to being stored in Grail.</p>\n<h3 id=\"createpipeline\">Create Pipeline</h3>\n<p>From the Dynatrace environment, locate and launch the <code>OpenPipeline</code> App.  Select the <code>Metrics</code> tab on the left.</p>\n<p><img src=\"assets/04_02_openpipeline_metrics.png\" alt=\"OpenPipeline App\" /></p>\n<p>Click on the <code>Pipelines</code> tab.</p>\n<p><img src=\"assets/04_02_openpipeline_new_pipeline.png\" alt=\"New Pipeline\" /></p>\n<p>Click on <code>+ Pipeline</code> to create a new pipeline.</p>\n<p><img src=\"assets/04_02_pipeline_parse_namespace.png\" alt=\"Name Pipeline\" /></p>\n<p>Rename the pipeline to <code>idp-project-metrics</code>.  Select the <code>Processing</code> tab.  Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Parse Namespace\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(k8s.namespace.name) and matchesPhrase(k8s.namespace.name,&quot;simplenodeservice&quot;)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">parse k8s.namespace.name, &quot;LD:idp_project &#x27;-&#x27; LD:idp_team &#x27;-&#x27; LD:idp_stage&quot;\n</code></pre>\n<p><img src=\"assets/04_02_pipeline_idp_project.png\" alt=\"Add Project\" /></p>\n<p>Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">IDP Project\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(idp_team) and isNotNull(idp_stage) and matchesPhrase(k8s.namespace.name,&quot;simplenodeservice&quot;)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">fieldsAdd idp_project = &quot;simplenodeservice&quot;\n</code></pre>\n<p><img src=\"assets/04_02_pipeline_parse_cluster.png\" alt=\"Parse Cluster\" /></p>\n<p>Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Parse Cluster\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(k8s.cluster.name)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">fieldsAdd idp_cluster = k8s.cluster.name\n</code></pre>\n<p><img src=\"assets/04_02_pipeline_add_security_context.png\" alt=\"Security Context\" /></p>\n<p>Add a new processor and choose <code>DQL</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">Security Context\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(idp_team) and isNotNull(idp_cluster)\n</code></pre>\n<p>DQL:</p>\n<pre><code class=\"hljs text language-text\">fieldsAdd idp_security_context = concat(&quot;idp_&quot;,idp_team,&quot;_&quot;,idp_cluster)\n</code></pre>\n<p><img src=\"assets/04_02_pipeline_set_security_context.png\" alt=\"Set Security Context\" /></p>\n<p>Select the <code>Permission</code> tab.  Add a new processor and choose <code>Set security context</code>.</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">IDP Security Context\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(idp_security_context)\n</code></pre>\n<p>Field Name</p>\n<pre><code class=\"hljs text language-text\">idp_security_context\n</code></pre>\n<p>Click on <code>Save</code> to save the pipeline configuration.</p>\n<h3 id=\"createdynamicroute\">Create Dynamic Route</h3>\n<p>From the OpenPipeline Metrics configuration page, click on <code>Dynamic Routing</code>.</p>\n<p><img src=\"assets/04_02_pipeline_routes_new_route.png\" alt=\"Dynamic Routes\" /></p>\n<p>Click on <code>+ Dynamic Route</code> to create a new route for the pipeline.</p>\n<p><img src=\"assets/04_02_pipeline_set_dynamic_route.png\" alt=\"New Route\" /></p>\n<p>Set the dynamic route properties:</p>\n<p>Name:</p>\n<pre><code class=\"hljs text language-text\">idp-project-metrics\n</code></pre>\n<p>Matching Condition:</p>\n<pre><code class=\"hljs text language-text\">isNotNull(k8s.namespace.name) and matchesPhrase(k8s.namespace.name,&quot;simplenodeservice&quot;)\n</code></pre>\n<p>Pipeline:</p>\n<pre><code class=\"hljs text language-text\">idp-project-metrics\n</code></pre>\n<p>Click <code>Save</code> to save the dynamic route configuration.  This change is not retroactive.  New metric data points matching the condition will be routed through the new pipeline.</p>\n<h3 id=\"querynewmetricdata\">Query New Metric Data</h3>\n<p>The change will likely take a few minutes to complete.  After some time, return to the <code>IDP OpenPipeline</code> Notebook.</p>\n<p><img src=\"assets/04_02_notebook_query_cpu.png\" alt=\"Query Container CPU\" /></p>\n<p>Locate the first explore metrics section and query the metric <code>dt.kubernetes.container.cpu_usage</code>.</p>\n<p>Leverage the new OpenPipeline configuration and filter the metric on <code>idp_project=simplenodeservice</code> and <code>idp_team=team01</code>.</p>\n<p>Split the metric by <code>k8s.pod.name</code>.  The chart now shows container CPU usage per pod, only for pods that belong to idp team <code>team01</code>.</p>\n<p><img src=\"assets/04_02_notebook_query_service.png\" alt=\"Query Service Throughput\" /></p>\n<p>Locate the second explore metrics section and query the metric <code>dt.service.request.count</code>.</p>\n<p>Leverage the new OpenPipeline configuration and filter the metric on <code>idp_team=team02</code>.</p>\n<p>Split the metric by <code>idp_stage</code> and <code>dt.entity.service</code>.  The chart now shows service request count per service, only for services that belong to idp team <code>team02</code>.</p>","activityList":[]}]},{"id":"5","name":"Complex Segments","content":"<h2 id=\"complexsegments\">Complex Segments</h2>\n<p>Configure and use Segments to apply filters to data retrieved from Grail.</p>\n<ul>\n<li>Configure (more) complex Segments<ul>\n<li>Project Team (Ownership, IDP)</li></ul></li>\n<li>Analyze with Segments</li>\n</ul>","activityList":[{"id":"5.1","name":"Create IDP Project Team Segment","content":"<h2 id=\"createidpprojectteamsegment\">Create IDP Project Team Segment</h2>\n<p>Create Segment to filter analysis on IDP Project Team</p>\n<h3 id=\"createsegment\">Create Segment</h3>\n<p>In the Dynatrace environment, locate and launch the <code>Segments</code> App.</p>\n<p><img src=\"assets/05_01_segments_add_segment.png\" alt=\"Segments App\" /></p>\n<p>Click on <code>+ Segment</code> to create a new Segment.</p>\n<p><img src=\"assets/05_01_project_team_segment.png\" alt=\"idp-proj-team Segment\" /></p>\n<p>Name the Segment <code>idp-proj-team</code>.</p>\n<p>Begin by defining a Variable for the Segment.</p>\n<p><img src=\"assets/05_01_project_team_variable.png\" alt=\"idp-proj-team Variable\" /></p>\n<p>In your Variables configuration, enter the following DQL Query:</p>\n<pre><code class=\"hljs sql language-sql\">fetch dt.entity.service\n| fields id, entity.name, tags\n| expand tags\n| filter matchesPhrase(tags,&quot;[Kubernetes]dt.owner&quot;)\n| parse tags, &quot;DATA:tag_key &#x27;:&#x27; DATA:tag_value&quot;\n| summarize count(), by: {tag_value, tags}\n| fields `proj_team` = tag_value, tags\n</code></pre>\n<p>Click <code>Preview</code> to run the query.  You should see your <code>team01</code> and <code>team02</code> dt.owner details.</p>\n<p>Click <code>Done</code>.</p>\n<p><img src=\"assets/05_01_project_team_segment.png\" alt=\"idp-proj-team Segment\" /></p>\n<p>Under Segment data, create a new rule for <code>All data types</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">idp_team = &quot;$proj_team&quot;\n</code></pre>\n<p>Adding this segment data filter to our Segment will apply to any Grail data queries when this Segment is applied.</p>\n<p>Under Segment data, create a new rule for <code>Entities</code> &gt; <code>Service</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">tags = &quot;$tags&quot;\n</code></pre>\n<p>Add related entities to the Segment data filter.  Click on <code>+ Related entity</code> and choose <code>Process</code>.  This will include any Process entity that is related to the Service.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">tags = &quot;$tags&quot;\n</code></pre>\n<p>Next, click on <code>+ Related entity</code> and choose <code>Process Group</code>.  Type to add a filter.  Use the following filter:</p>\n<pre><code class=\"hljs text language-text\">tags = &quot;$tags&quot;\n</code></pre>\n<p>Repeat this process for ALL remaining related entity types, not using a filter.</p>\n<p>As you make your configurations, clicking on <code>Preview</code> will allow you to see which entities or data types matched your filter.</p>\n<p>When your Segment configuration is complete, click on <code>Save</code>.</p>\n<p>Note: You can change the visibility of your Segment, however if you are the only one accessing the environment, this is irrelevant.</p>","activityList":[]},{"id":"5.2","name":"Analyze with Segments","content":"<h2 id=\"analyzewithsegments\">Analyze with Segments</h2>\n<p>Analyze the applications in Dynatrace, this time using the newly created Segments.</p>\n<h3 id=\"exploreidpsimplenodeservicesdashboard\">Explore IDP SimpleNodeServices Dashboard</h3>\n<p>If you haven't already, import the <a href=\"https://github.com/dynatrace-wwse/enablement-openpipeline-segments-iam/blob/main/lab-guide/assets/dynatrace/IDP_%20SimpleNodeServices_Dashboard.json\">IDP SimpleNodeServices</a> Dashboard into the Dynatrace environment.</p>\n<p><img src=\"assets/05_02_dashboard_previous_segments.png\" alt=\"IDP SimpleNodeServices Dashboard\" /></p>\n<p>If the previous Segment filters were removed, re-apply the cluster and namespace Segment filters.</p>\n<p>Apply the new Segment filter to the dashboard.  Click on the <code>Segments</code> icon to open the Segments filter prompt (next to the timeframe selector).</p>\n<p><img src=\"assets/05_02_dashboard_apply_segments.png\" alt=\"Dashboard New Segment\" /></p>\n<p>Click on <code>+ Segment</code> to add a new Segment filter.  Select the <code>idp-proj-team</code> Segment.  Click the checkbox to apply <code>team01</code> for the dynamic Segment.</p>\n<p>Click <code>Apply</code> to update the Segment filter.</p>\n<p>Use the variable selector for <code>Namespace</code>.  Notice the reduced list of namespaces available to choose from.</p>\n<h3 id=\"exploreservicesapp\">Explore Services App</h3>\n<p>Launch the <code>Services</code> App.  Identify the services that have been detected in the environment.</p>\n<p><img src=\"assets/05_02_services_no_segments.png\" alt=\"Services No Segments\" /></p>\n<p>Locate and click on the <code>Segments</code> icon to open the Segments filter prompt (top left corner of the App).</p>\n<p><img src=\"assets/05_02_services_apply_segments.png\" alt=\"Services Apply Segments\" /></p>\n<p>Click on <code>+ Segment</code> to add a new Segment filter.  Select the <code>idp-proj-team</code> Segment.  Click the checkbox to apply <code>team01</code> and <code>team02</code> for the dynamic Segment.</p>\n<p>Click <code>Apply</code> to update the Segment filter.</p>\n<p>Notice the reduced list of services available to choose from.</p>","activityList":[]}]},{"id":"6","name":"Wrap Up","content":"<h2 id=\"wrapup\">Wrap Up</h2>\n<ul>\n<li>Key Takeaways</li>\n<li>Codespaces Cleanup</li>\n</ul>","activityList":[{"id":"6.1","name":"Key Takeaways","content":"<h2 id=\"keytakeaways\">Key Takeaways</h2>\n<ul>\n<li>Management Zones are still supported for Gen2 use cases<ul>\n<li>Customers can continue to manage access and filter visualizations to Classic Dynatrace using MZ</li></ul></li>\n<li>Managing access and filtering visualizations with Grail uses IAM + Segments<ul>\n<li>Manage access to data in Grail with IAM Policies, including record-level permission statements</li>\n<li>Filter visualizations with Grail using Segments</li></ul></li>\n<li>Customers should strategize their IAM Policies for data access management first before developing Segment configurations<ul>\n<li>Segments are quick and reusable DQL query filters, not like management zones!</li></ul></li>\n<li>Segment feature improvements are coming<ul>\n<li>Many of today’s limitations are due to the entity model not being in Grail</li></ul></li>\n<li>Best practice implementation sequence:<ul>\n<li>Ingest data into Dynatrace, Configure OpenPipeline, Configure IAM, Configure Segments</li></ul></li>\n</ul>","activityList":[]},{"id":"6.2","name":"Codespaces Cleanup","content":"<h2 id=\"codespacescleanup\">Codespaces Cleanup</h2>\n<p>Delete your codespaces instance when you are finished.</p>\n<p>Navigate to the GitHub Codespaces page at <a href=\"https://github.com/codespaces/\">https://github.com/codespaces/</a></p>\n<p><img src=\"assets/06_02_codespaces_cleanup.png\" alt=\"Codespaces Cleanup\" /></p>\n<p>Locate your instance, click the <code>...</code> button, and click <code>Delete</code>.</p>\n<p>When you're finished with the repository, you can delete your fork as well.</p>","activityList":[]}]}]